# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '受力计算.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow,QMessageBox
from PyQt5.QtGui import *
import numpy as np
import sqlite3
import datetime
from sqlite3 import Error

#连接数据库
def sql_connection():
    try:
        con = sqlite3.connect("公式集合数据库.db")
        return con
    except Error:
        print(Error)
#创建表
def sql_table(con):
    try:
        # 创建游标
        cursor = con.cursor()
        cursor.execute("create table 受力计算 (日期,受力外径,受力内径,受力面积,压力,力)")
        # 提交事务
        con.commit()
    except Error:
        print(Error)
con = sql_connection()
sql_table(con)

class Ui_F(QMainWindow):
    def setupUi(self, F):
        F.setObjectName("F")
        F.setWindowModality(QtCore.Qt.NonModal)
        F.setEnabled(True)
        F.resize(620, 450)
        F.setMaximumSize(QtCore.QSize(620, 450))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        F.setFont(font)
        F.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/PNG/chengliang.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        F.setWindowIcon(icon)
        F.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label = QtWidgets.QLabel(F)
        self.label.setGeometry(QtCore.QRect(0, 20, 620, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(24)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(F)
        self.pushButton.setGeometry(QtCore.QRect(380, 380, 100, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(18)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.pushButton.setObjectName("pushButton")
        self.lineEdit_2 = QtWidgets.QLineEdit(F)
        self.lineEdit_2.setGeometry(QtCore.QRect(220, 180, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_2.setAccessibleName("")
        self.lineEdit_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_2.setReadOnly(False)
        self.lineEdit_2.setPlaceholderText("")
        self.lineEdit_2.setClearButtonEnabled(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_4 = QtWidgets.QLineEdit(F)
        self.lineEdit_4.setGeometry(QtCore.QRect(220, 280, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_4.setAccessibleName("")
        self.lineEdit_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_4.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_4.setText("")
        self.lineEdit_4.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_4.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_4.setReadOnly(False)
        self.lineEdit_4.setPlaceholderText("")
        self.lineEdit_4.setClearButtonEnabled(True)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit = QtWidgets.QLineEdit(F)
        self.lineEdit.setGeometry(QtCore.QRect(220, 130, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit.setFont(font)
        self.lineEdit.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit.setAccessibleName("")
        self.lineEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit.setText("")
        self.lineEdit.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit.setReadOnly(False)
        self.lineEdit.setPlaceholderText("")
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_3 = QtWidgets.QLineEdit(F)
        self.lineEdit_3.setGeometry(QtCore.QRect(220, 230, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_3.setAccessibleName("")
        self.lineEdit_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_3.setText("")
        self.lineEdit_3.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_3.setReadOnly(False)
        self.lineEdit_3.setPlaceholderText("")
        self.lineEdit_3.setClearButtonEnabled(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_4 = QtWidgets.QLabel(F)
        self.label_4.setGeometry(QtCore.QRect(20, 175, 190, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(F)
        self.label_5.setGeometry(QtCore.QRect(20, 230, 190, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(F)
        self.label_6.setGeometry(QtCore.QRect(20, 280, 190, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.label_3 = QtWidgets.QLabel(F)
        self.label_3.setGeometry(QtCore.QRect(20, 130, 190, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.label_10 = QtWidgets.QLabel(F)
        self.label_10.setGeometry(QtCore.QRect(40, 380, 250, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("background-color: rgb(85, 170, 0);")
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.radioButton = QtWidgets.QRadioButton(F)
        self.radioButton.setGeometry(QtCore.QRect(120, 80, 100, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(F)
        self.radioButton_2.setGeometry(QtCore.QRect(240, 80, 100, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(F)
        self.radioButton_3.setGeometry(QtCore.QRect(370, 80, 100, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setObjectName("radioButton_3")
        self.checkBox = QtWidgets.QCheckBox(F)
        self.checkBox.setGeometry(QtCore.QRect(490, 230, 120, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        self.checkBox.setFont(font)
        self.checkBox.setChecked(False)
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(F)
        self.checkBox_2.setGeometry(QtCore.QRect(490, 280, 120, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setChecked(True)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(F)
        self.checkBox_3.setGeometry(QtCore.QRect(490, 330, 120, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setChecked(False)
        self.label_2 = QtWidgets.QLabel(F)
        self.label_2.setGeometry(QtCore.QRect(20, 330, 190, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_3")
        self.lineEdit_5 = QtWidgets.QLineEdit(F)
        self.lineEdit_5.setGeometry(QtCore.QRect(220, 330, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_5.setAccessibleName("")
        self.lineEdit_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_5.setText("")
        self.lineEdit_5.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_5.setReadOnly(False)
        self.lineEdit_5.setPlaceholderText("")
        self.lineEdit_5.setClearButtonEnabled(True)
        self.lineEdit_5.setObjectName("lineEdit_3")

        self.retranslateUi(F)
        QtCore.QMetaObject.connectSlotsByName(F)

        # 只允许输入数字
        self.lineEdit.setValidator(QDoubleValidator())
        self.lineEdit_2.setValidator(QDoubleValidator())
        self.lineEdit_3.setValidator(QDoubleValidator())
        self.lineEdit_4.setValidator(QDoubleValidator())

        # 设置信号
        self.pushButton.clicked.connect(self.jisuan)
        self.radioButton_2.toggled.connect(self.qiu)
        self.radioButton.toggled.connect(self.qiu)
        self.radioButton_3.toggled.connect(self.qiu)
        self.checkBox.toggled.connect(self.yizhi)
        self.checkBox_2.toggled.connect(self.yizhi)
        self.checkBox_3.toggled.connect(self.yizhi)
        self.radioButton.setChecked(True)



    #求参数
    def qiu(self):
        if self.radioButton.isChecked():#求力
            self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit.clear()
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.yizhi()
        if self.radioButton_2.isChecked() :#求压力
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_2.clear()
            self.yizhi()
        if self.radioButton_3.isChecked():#求面积
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.checkBox.setChecked(False)
            self.checkBox_2.setChecked(False)
            self.checkBox_3.setChecked(False)
            self.lineEdit_3.clear()
            self.lineEdit_4.clear()
            self.lineEdit_5.clear()

    #已知参数
    def yizhi(self):
        if self.checkBox.isChecked() == False: #已知直径
            if self.checkBox_3.isChecked() == True and self.checkBox_2.isChecked() == True and self.radioButton_3.isChecked() == False: #已知D d
                self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_3.clear()
                self.lineEdit_4.setStyleSheet("background-color: rgb(85, 255, 255);")
                self.lineEdit_5.setStyleSheet("background-color: rgb(85, 255, 255);")
            if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == False and self.radioButton_3.isChecked() == False:#已知D
                self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_3.clear()
                self.lineEdit_4.setStyleSheet("background-color: rgb(85, 255, 255);")
                self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_5.clear()
            if self.checkBox_2.isChecked() == False and self.radioButton_3.isChecked() == False: #D不选择
                self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_3.clear()
                self.lineEdit_4.setStyleSheet("background-color: rgb(85, 255, 255);")
                self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_5.clear()
                self.checkBox_2.setChecked(True)
        elif self.checkBox.isChecked() == True and self.radioButton_3.isChecked() == False: #已知面积
                self.lineEdit_3.setStyleSheet("background-color: rgb(85, 255, 255);")
                self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_4.clear()
                self.lineEdit_5.clear()
                self.checkBox_3.setChecked(False)
                self.checkBox_2.setChecked(False)
        if self.radioButton_3.isChecked() == True:
            if self.checkBox.isChecked():
                self.checkBox.setChecked(False)
            if self.checkBox_2.isChecked()==True:
                self.checkBox_3.setChecked(False)
                self.lineEdit_4.setStyleSheet("background-color: rgb(85, 255, 255);")
            else:
                self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_4.clear()
            if self.checkBox_3.isChecked()==True:
                self.checkBox_2.setChecked(False)
                self.lineEdit_5.setStyleSheet("background-color: rgb(85, 255, 255);")
            else:
                self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lineEdit_5.clear()

    # 创建计算
    def jisuan(self):
            global F, D, P,S,d
            F = self.lineEdit.text()
            P = self.lineEdit_2.text()
            S = self.lineEdit_3.text()
            D = self.lineEdit_4.text()
            d=self.lineEdit_5.text()
            #求力
            if self.radioButton.isChecked():
                if P == None or P == "" or float(P)<0:
                    QMessageBox.information(None, "使用提示", "请正确输入压力值！", QMessageBox.Ok)
                if self.checkBox_2.isChecked()==True and self.checkBox_3.isChecked()==False:
                    if D == None or D == "" or float(D) < 0:
                        QMessageBox.information(None, "使用提示", "请正确输入外径值！", QMessageBox.Ok)
                    else:
                        S = round(np.pi * np.square(float(D) / 2), 5)
                        self.lineEdit_3.setText(str(S))
                        F = round(float(P) * S, 5)
                        self.lineEdit.setText(str(F))
                        self.shuju()
                if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == True:
                    if D == None or D == "" or d == None or d == "" or float(D) < 0 or float(d) < 0:
                        QMessageBox.information(None, "使用提示", "请正确输入外径值和内径值！", QMessageBox.Ok)
                    else:
                        S = round(np.pi * np.square(float(D) / 2)-np.pi * np.square(float(d) / 2), 5)
                        self.lineEdit_3.setText(str(S))
                        F = round(float(P) * S, 5)
                        self.lineEdit.setText(str(F))
                        self.shuju()
                if self.checkBox.isChecked():
                    if S == None or S == "" or float(S) < 0:
                        QMessageBox.information(None, "使用提示", "请正确输入面积值！", QMessageBox.Ok)
                    else:
                        D = round(2 * np.sqrt(float(S) / np.pi), 5)
                        self.lineEdit_4.setText(str(D))
                        F = round(float(P) * float(S), 5)
                        self.lineEdit.setText(str(F))
                        self.shuju()
            #求压力
            if self.radioButton_2.isChecked():
                if F == None or F == "" or float(F)<0:
                    QMessageBox.information(None, "使用提示", "请正确输入压力！", QMessageBox.Ok)
                if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == False:
                    if D == None or D == "" or float(D) < 0:
                        QMessageBox.information(None, "使用提示", "请正确输入外径值！", QMessageBox.Ok)
                    else:
                        S = round(np.pi * np.square(float(D) / 2), 5)
                        self.lineEdit_3.setText(str(S))
                        P = round(float(F) / S, 5)
                        self.lineEdit_2.setText(str(P))
                        self.shuju()
                if self.checkBox_2.isChecked() == True and self.checkBox_3.isChecked() == True:
                    if D == None or D == "" or d == None or d == "" or float(D) < 0 or float(d) < 0:
                        QMessageBox.information(None, "使用提示", "请正确输入外径值和内径值！", QMessageBox.Ok)
                    else:
                        S = round(np.pi * np.square(float(D) / 2) - np.pi * np.square(float(d) / 2), 5)
                        self.lineEdit_3.setText(str(S))
                        P = round(float(F) / S, 5)
                        self.lineEdit_2.setText(str(P))
                        self.shuju()
                if self.checkBox.isChecked():
                    if S == None or S == "" or float(S) < 0:
                        QMessageBox.information(None, "使用提示", "请正确输入面积值！", QMessageBox.Ok)
                    else:
                        D = round(2 * np.sqrt(float(S) / np.pi), 5)
                        self.lineEdit_4.setText(str(D))
                        P = round(float(F) / float(S), 5)
                        self.lineEdit_2.setText(str(P))
                        self.shuju()
            if self.radioButton_3.isChecked():
                if P == None or P == "" or F == None or F == "" or float(P) < 0 or float(F) < 0:
                    QMessageBox.information(None, "使用提示", "请正确输入压力和力！", QMessageBox.Ok)
                elif self.checkBox_2.isChecked()==False and self.checkBox_3.isChecked() == False:
                    S=round(float(F) / float(P),5)
                    D = round(2 * np.sqrt(float(S) / np.pi), 5)
                    self.lineEdit_4.setText(str(D))
                    self.lineEdit_3.setText(str(S))
                    self.shuju()
                elif self.checkBox_2.isChecked()==True and self.checkBox_3.isChecked() == False:
                    S=round(float(F) / float(P),5)
                    d = round(np.sqrt(np.square(float(D))-4*float(S) / np.pi), 5)
                    self.lineEdit_5.setText(str(d))
                    self.lineEdit_3.setText(str(S))
                    self.shuju()
                elif self.checkBox_2.isChecked()==False and self.checkBox_3.isChecked() == True:
                    S=round(float(F) / float(P),5)
                    D = round(np.sqrt(np.square(float(d))+4*float(S) / np.pi), 5)
                    self.lineEdit_4.setText(str(D))
                    self.lineEdit_3.setText(str(S))
                    self.shuju()

    def datetime(self):
        global now_time
        now_time = datetime.datetime.now().strftime("%Y.%m.%d %H:%M:%S")

    def shuju(self):
        self.datetime()
        def sql_insert(con, data):
            cursor = con.cursor()
            cursor.execute("insert into 受力计算 (日期,受力外径,受力内径,受力面积,压力,力) values(?,?,?,?,?,?)", data)
            con.commit()
        data = (now_time,D,d,S,P,F)
        sql_insert(con, data)

    def retranslateUi(self, F):
        _translate = QtCore.QCoreApplication.translate
        F.setWindowTitle(_translate("F", "受力计算V1.1 By ChengLiang"))
        self.label.setText(_translate("F", "受力计算"))
        self.pushButton.setText(_translate("F", "计算"))
        self.label_4.setText(_translate("F", "压力P(MPa)"))
        self.label_5.setText(_translate("F", "受力面积S(mm2)"))
        self.label_6.setText(_translate("F", "受力外径D(mm)"))
        self.label_3.setText(_translate("F", "力F(N)"))
        self.label_10.setText(_translate("F", "<html><head/><body><p>F=PS</p></body></html>"))
        self.radioButton.setText(_translate("F", "求力"))
        self.radioButton_2.setText(_translate("F", "求压力"))
        self.radioButton_3.setText(_translate("F", "求面积"))
        self.checkBox.setText(_translate("F", "已知面积"))
        self.checkBox_2.setText(_translate("F", "已知外径D"))
        self.checkBox_3.setText(_translate("F", "已知内径d"))
        # self.checkBox_4.setText(_translate("F", "已知内径d"))
        self.label_2.setText(_translate("F", "受力内径d(mm)"))



import img_rc
import sys
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    Mainwidow = QtWidgets.QMainWindow()  # 创建窗体对象
    ui = Ui_F()  # 创建QT设计的窗体
    ui.setupUi(Mainwidow)  # 初始化设置
    Mainwidow.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程