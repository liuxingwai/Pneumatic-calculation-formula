# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '定容积充气公式.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QMessageBox
import numpy as np
from PyQt5.QtGui import *
import sqlite3
import datetime
from sqlite3 import Error

#连接数据库
def sql_connection():
    try:
        # con = sqlite3.connect("定容充气计算数据库.db")
        con = sqlite3.connect("公式集合数据库.db")
        return con
    except Error:
        print(Error)
#创建表
def sql_table(con):
    try:
        # 创建游标
        cursor = con.cursor()
        cursor.execute("create table 定容充气 (日期,气体类型,孔直径D,孔面积S,容器容积V,等熵指数κ,气源温度Ts,容器内气体的初始压力P1,气源绝对压力Ps,充气时间t)")
        # 提交事务
        con.commit()
    except Error:
        print(Error)
con = sql_connection()
sql_table(con)

class Ui_dingrongchongqi(QMainWindow):
    def setupUi(self, dingrongchongqi):
        dingrongchongqi.setObjectName("dingrongchongqi")
        dingrongchongqi.setWindowModality(QtCore.Qt.NonModal)
        dingrongchongqi.setEnabled(True)
        dingrongchongqi.resize(740, 590)
        dingrongchongqi.setMaximumSize(QtCore.QSize(740, 590))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        dingrongchongqi.setFont(font)
        dingrongchongqi.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/PNG/chengliang.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        dingrongchongqi.setWindowIcon(icon)
        dingrongchongqi.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label = QtWidgets.QLabel(dingrongchongqi)
        self.label.setGeometry(QtCore.QRect(0, 20, 740, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(24)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(dingrongchongqi)
        self.pushButton.setGeometry(QtCore.QRect(650, 525, 60, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(18)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.pushButton.setObjectName("pushButton")
        self.label_9 = QtWidgets.QLabel(dingrongchongqi)
        self.label_9.setGeometry(QtCore.QRect(21, 460, 350, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_9.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.lineEdit_2 = QtWidgets.QLineEdit(dingrongchongqi)
        self.lineEdit_2.setGeometry(QtCore.QRect(380, 210, 330, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_2.setClearButtonEnabled(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.radioButton = QtWidgets.QRadioButton(dingrongchongqi)
        self.radioButton.setGeometry(QtCore.QRect(330, 75, 120, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(dingrongchongqi)
        self.radioButton_2.setGeometry(QtCore.QRect(470, 75, 100, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(dingrongchongqi)
        self.radioButton_3.setGeometry(QtCore.QRect(590, 75, 120, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(dingrongchongqi)
        self.radioButton_4.setGeometry(QtCore.QRect(390, 115, 120, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton_5 = QtWidgets.QRadioButton(dingrongchongqi)
        self.radioButton_5.setGeometry(QtCore.QRect(540, 115, 140, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setObjectName("radioButton_5")
        self.label_2 = QtWidgets.QLabel(dingrongchongqi)
        self.label_2.setGeometry(QtCore.QRect(20, 100, 140, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(dingrongchongqi)
        self.comboBox.setGeometry(QtCore.QRect(180, 100, 130, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.lineEdit_7 = QtWidgets.QLineEdit(dingrongchongqi)
        self.lineEdit_7.setEnabled(True)
        self.lineEdit_7.setGeometry(QtCore.QRect(380, 460, 330, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_7.setFont(font)
        self.lineEdit_7.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_7.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_7.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_7.setText("")
        self.lineEdit_7.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_7.setClearButtonEnabled(True)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_4 = QtWidgets.QLineEdit(dingrongchongqi)
        self.lineEdit_4.setGeometry(QtCore.QRect(380, 310, 330, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_4.setText("")
        self.lineEdit_4.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_4.setClearButtonEnabled(True)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(dingrongchongqi)
        self.lineEdit_5.setEnabled(True)
        self.lineEdit_5.setGeometry(QtCore.QRect(380, 360, 330, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(dingrongchongqi)
        self.lineEdit_6.setGeometry(QtCore.QRect(380, 410, 330, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_6.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_6.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_6.setText("")
        self.lineEdit_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_6.setClearButtonEnabled(True)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit = QtWidgets.QLineEdit(dingrongchongqi)
        self.lineEdit.setGeometry(QtCore.QRect(380, 160, 330, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit.setFont(font)
        self.lineEdit.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit.setText("")
        self.lineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_3 = QtWidgets.QLineEdit(dingrongchongqi)
        self.lineEdit_3.setGeometry(QtCore.QRect(380, 260, 330, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_3.setText("")
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_3.setClearButtonEnabled(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setText("1.666")
        self.label_8 = QtWidgets.QLabel(dingrongchongqi)
        self.label_8.setGeometry(QtCore.QRect(21, 410, 350, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_8.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.label_4 = QtWidgets.QLabel(dingrongchongqi)
        self.label_4.setGeometry(QtCore.QRect(21, 210, 350, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(dingrongchongqi)
        self.label_5.setGeometry(QtCore.QRect(21, 260, 350, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(dingrongchongqi)
        self.label_6.setGeometry(QtCore.QRect(21, 310, 350, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(dingrongchongqi)
        self.label_7.setGeometry(QtCore.QRect(21, 360, 350, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_7.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.label_3 = QtWidgets.QLabel(dingrongchongqi)
        self.label_3.setGeometry(QtCore.QRect(21, 160, 350, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")

        self.label_10 = QtWidgets.QLabel(dingrongchongqi)
        self.label_10.setGeometry(QtCore.QRect(10, 515, 630, 60))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(14)
        font.setKerning(True)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("background-color: rgb(85, 170, 0);")
        self.label_10.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")

        self.retranslateUi(dingrongchongqi)
        QtCore.QMetaObject.connectSlotsByName(dingrongchongqi)

        self.radioButton.setChecked(True)
        self.lineEdit_5.setClearButtonEnabled(True)

        self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_3.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_4.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_5.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_6.setStyleSheet("background-color: rgb(85, 255, 255);")



        # 设置信号
        self.pushButton.clicked.connect(self.jisuan)
        self.radioButton.toggled.connect(self.cleck)
        self.radioButton_2.toggled.connect(self.cleck)
        self.radioButton_3.toggled.connect(self.cleck)
        self.radioButton_4.toggled.connect(self.cleck)
        self.radioButton_5.toggled.connect(self.cleck)
        self.comboBox.currentIndexChanged.connect(self.box)

        # 只允许输入数字
        self.lineEdit.setValidator(QDoubleValidator())
        self.lineEdit_2.setValidator(QDoubleValidator())
        self.lineEdit_3.setValidator(QDoubleValidator())
        self.lineEdit_4.setValidator(QDoubleValidator())
        self.lineEdit_5.setValidator(QDoubleValidator())
        self.lineEdit_6.setValidator(QDoubleValidator())
        self.lineEdit_7.setValidator(QDoubleValidator())


    def retranslateUi(self, dingrongchongqi):
        _translate = QtCore.QCoreApplication.translate
        dingrongchongqi.setWindowTitle(_translate("dingrongchongqi", "定容充气计算V1.1 By ChengLiang"))
        self.label.setText(_translate("dingrongchongqi", "定容充气计算"))
        self.pushButton.setText(_translate("dingrongchongqi", "计算"))
        self.label_9.setText(_translate("dingrongchongqi", "充气时间t（s）"))
        self.radioButton.setText(_translate("dingrongfangqi", "求充气时间"))
        self.radioButton_2.setText(_translate("dingrongfangqi", "求孔直径"))
        self.radioButton_3.setText(_translate("dingrongfangqi", "求容器容积"))
        self.radioButton_4.setText(_translate("dingrongfangqi", "求初始压力"))
        self.radioButton_5.setText(_translate("dingrongfangqi", "求气源压力"))
        self.label_2.setText(_translate("dingrongchongqi", "气体等熵指数"))
        self.comboBox.setItemText(0, _translate("dingrongchongqi", "氦气"))
        self.comboBox.setItemText(1, _translate("dingrongchongqi", "氩气"))
        self.comboBox.setItemText(2, _translate("dingrongchongqi", "氢气"))
        self.comboBox.setItemText(3, _translate("dingrongchongqi", "氧气"))
        self.comboBox.setItemText(4, _translate("dingrongchongqi", "氮气"))
        self.comboBox.setItemText(5, _translate("dingrongchongqi", "空气"))
        self.comboBox.setItemText(6, _translate("dingrongchongqi", "二氧化碳"))
        self.label_8.setText(_translate("dingrongchongqi", "气源绝对压力Ps（MPa）"))
        self.label_4.setText(_translate("dingrongchongqi", "容器容积V（L）"))
        self.label_5.setText(_translate("dingrongchongqi", "等熵指数κ"))
        self.label_6.setText(_translate("dingrongchongqi", "气源温度Ts（℃）"))
        self.label_7.setText(_translate("dingrongchongqi", "容器内气体的初始压力P1（MPa）"))
        self.label_3.setText(_translate("dingrongchongqi", "孔直径D（mm）"))
        self.label_10.setText(_translate("dingrongchongqi", "时间t=(1.285-(P1/Ps))*（5.217*V/(κ*S)*(273.16/(273+Ts))^0.5）"))

    # 创建选择
    def cleck(self):
        if self.radioButton.isChecked():
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_7.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_7.clear()
        elif self.radioButton_2.isChecked():
            self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_7.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit.clear()
        elif self.radioButton_3.isChecked():
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_7.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.clear()
        elif self.radioButton_4.isChecked():
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_7.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_5.clear()
        elif self.radioButton_5.isChecked():
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_7.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_6.clear()

    #气体选择
    def qiti(self):
        A = self.comboBox.currentText()
        if A == "氦气":
            self.lineEdit_3.setText("1.666")
        if A == "氩气":
            self.lineEdit_3.setText("1.665")
        if A == "氢气":
            self.lineEdit_3.setText("1.405")
        if A == "氧气":
            self.lineEdit_3.setText("1.396")
        if A == "氮气":
            self.lineEdit_3.setText("1.400")
        if A == "空气":
            self.lineEdit_3.setText("1.400")
        if A == "二氧化碳":
            self.lineEdit_3.setText("1.399")

    def box(self):
        self.qiti()
        self.jisuan()


#创建计算
    def jisuan(self):
        global S, D, V, κ, Ts, P1, Ps, t, τ
        D = self.lineEdit.text()
        V = self.lineEdit_2.text()
        κ = self.lineEdit_3.text()
        Ts = self.lineEdit_4.text()
        P1 = self.lineEdit_5.text()
        Ps = self.lineEdit_6.text()
        t = self.lineEdit_7.text()
        if self.radioButton.isChecked():
            if D == None or V == None or κ == None or P1 == None or Ps == None or Ts==None or \
                    D == "" or V == "" or κ == "" or P1 == "" or Ps == "" or Ts=="" or\
                    float(D) <= 0 or float(V) <= 0 or float(κ) <= 0 or float(P1) < 0 or float(Ps) < 0:
                QMessageBox.information(None, "使用提示", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
                self.qiti()
            else:
                κ = float(κ)
                V = float(V)
                Ts = float(Ts)
                P1 = float(P1)
                Ps = float(Ps)
                D = float(D)
                S = np.pi * np.power(D / 2, 2)
                τ = 5.217 * V / (κ * S) * np.power(273.16 / (273 + Ts), 0.5)
                t = round((1.285 - (P1 / Ps)) * τ, 12)
                if t<=0 or t==None:
                    QMessageBox.information(None, "使用提示", "t为负数，计算错误，请检查后重新计算（P1必须＜Ps）！", QMessageBox.Ok)
                else:
                    self.lineEdit_7.setText(str(t))
                    self.shuju()
        elif self.radioButton_2.isChecked():
            if t == None or V == None or κ == None or P1 == None or Ps == None or Ts==None or\
                    t == "" or V == "" or κ == "" or P1 == "" or Ps == "" or Ts=="" or\
                    float(t) <= 0 or float(V) <= 0 or float(κ) <= 0 or float(P1) < 0 or float(Ps) < 0:
                QMessageBox.information(None, "使用提示", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
            else:
                κ = float(κ)
                V = float(V)
                Ts = float(Ts)
                P1 = float(P1)
                Ps = float(Ps)
                t = float(t)
                S = ((1.285 - (P1 / Ps)) * (5.217 * V / (t * κ) * np.power(273.16 / (273 + Ts), 0.5)))
                D = round(2 * np.power(S / np.pi, 0.5), 12)
                if D<=0 or D==None:
                    QMessageBox.information(None, "使用提示", "D为负数，计算错误，请检查后重新计算（P1必须＜Ps）！", QMessageBox.Ok)
                else:
                    self.lineEdit.setText(str(D))
                    self.shuju()
        elif self.radioButton_3.isChecked():
            if t == None or D == None or κ == None or P1 == None or Ps == None or Ts==None or\
                    t == "" or D == "" or κ == "" or P1 == "" or Ps == "" or Ts=="" or\
                    float(t) <= 0 or float(D) <= 0 or float(κ) <= 0 or float(P1) < 0 or float(Ps) < 0:
                QMessageBox.information(None, "使用提示", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
            else:
                κ = float(κ)
                D = float(D)
                Ts = float(Ts)
                P1 = float(P1)
                Ps = float(Ps)
                t = float(t)
                S = np.pi * np.power(D / 2, 2)
                τ = t/(1.285 - (P1 / Ps))
                V=round(τ*(κ * S) /(np.power(273.16 / (273 + Ts), 0.5)*5.217),12)
                if V<=0 or V==None:
                    QMessageBox.information(None, "使用提示", "V为负数，计算错误，请检查后重新计算（P1必须＜Ps）！", QMessageBox.Ok)
                else:
                    self.lineEdit_2.setText(str(V))
                    self.shuju()
        elif self.radioButton_4.isChecked():
            if t == None or D == None or κ == None or V == None or Ps == None or Ts==None or\
                    t == "" or D == "" or κ == "" or V == "" or Ps == "" or Ts=="" or\
                    float(t) <= 0 or float(D) <= 0 or float(κ) <= 0 or float(V) <= 0 or float(Ps) < 0:
                QMessageBox.information(None, "使用提示", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
            else:
                κ = float(κ)
                D = float(D)
                Ts = float(Ts)
                V = float(V)
                Ps = float(Ps)
                t = float(t)
                S = np.pi * np.power(D / 2, 2)
                τ = 5.217 * V / (κ * S) * np.power(273.16 / (273 + Ts), 0.5)
                P1=round((1.285-t/τ)*Ps,12)
                if P1<=0 or P1==None:
                    QMessageBox.information(None, "使用提示", "P1为负数，计算错误，请检查后重新计算（P1必须＜Ps）！", QMessageBox.Ok)
                else:
                    self.lineEdit_5.setText(str(P1))
                    self.shuju()
        elif self.radioButton_5.isChecked():
            if t == None or D == None or κ == None or V == None or P1 == None or Ts==None or\
                    t == "" or D == "" or κ == "" or V == "" or P1 == "" or Ts=="" or\
                    float(t) <= 0 or float(D) <= 0 or float(κ) <= 0 or float(V) <= 0 or float(P1) < 0:
                QMessageBox.information(None, "使用提示", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
            else:
                κ = float(κ)
                D = float(D)
                Ts = float(Ts)
                V = float(V)
                P1 = float(P1)
                t = float(t)
                S = np.pi * np.power(D / 2, 2)
                τ = 5.217 * V / (κ * S) * np.power(273.16 / (273 + Ts), 0.5)
                Ps=round(P1/(1.285-t/τ),12)
                if Ps<=0 or Ps==None:
                    QMessageBox.information(None, "使用提示", "P1为负数，计算错误，请检查后重新计算（P1必须＜Ps）！", QMessageBox.Ok)
                else:
                    self.lineEdit_6.setText(str(Ps))
                    self.shuju()



    def datetime(self):
        global now_time
        now_time= datetime.datetime.now().strftime("%Y.%m.%d %H:%M:%S")

    def shuju(self):
        A = self.comboBox.currentText()
        self.datetime()
        def sql_insert(con, data):
            cursor = con.cursor()
            cursor.execute("insert into 定容充气 (日期,气体类型,孔直径D,孔面积S,容器容积V,等熵指数κ,气源温度Ts,容器内气体的初始压力P1,气源绝对压力Ps,充气时间t) values(?,?,?,?,?,?,?,?,?,?)",
                           data)
            con.commit()
        data = (now_time,A, D, S, V, κ, Ts, P1, Ps, t)
        sql_insert(con, data)

import img_rc
import sys
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    Mainwidow = QtWidgets.QMainWindow()  # 创建窗体对象
    ui = Ui_dingrongchongqi()  # 创建QT设计的窗体
    ui.setupUi(Mainwidow)  # 初始化设置
    Mainwidow.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程