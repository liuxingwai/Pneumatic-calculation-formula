# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '体积流量计算.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow,QMessageBox
from PyQt5.QtGui import *
import numpy as np
from sympy import *
import sqlite3
import datetime
from sqlite3 import Error

#连接数据库
def sql_connection():
    try:
        # con = sqlite3.connect("体积流量计算数据库.db")
        con = sqlite3.connect("公式集合数据库.db")
        return con
    except Error:
        print(Error)
#创建表
def sql_table(con):
    try:
        # 创建游标
        cursor = con.cursor()
        cursor.execute("create table 体积流量 (日期,温度T,节流孔前压力P1,节流孔后压力P2,节流孔直径D,节流面积S,体积流量Qv)")
        # 提交事务
        con.commit()
    except Error:
        print(Error)
con = sql_connection()
sql_table(con)


class Ui_tijiliuliang(QMainWindow):
    def setupUi(self, tijiliuliang):
        tijiliuliang.setObjectName("tijiliuliang")
        tijiliuliang.setWindowModality(QtCore.Qt.NonModal)
        tijiliuliang.setEnabled(True)
        tijiliuliang.resize(620, 540)
        tijiliuliang.setMaximumSize(QtCore.QSize(620, 540))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        tijiliuliang.setFont(font)
        tijiliuliang.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/PNG/chengliang.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        tijiliuliang.setWindowIcon(icon)
        tijiliuliang.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label = QtWidgets.QLabel(tijiliuliang)
        self.label.setGeometry(QtCore.QRect(0, 10, 620, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(24)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(tijiliuliang)
        self.pushButton.setGeometry(QtCore.QRect(400, 460, 100, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(18)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.pushButton.setObjectName("pushButton")
        self.lineEdit_2 = QtWidgets.QLineEdit(tijiliuliang)
        self.lineEdit_2.setGeometry(QtCore.QRect(310, 180, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_2.setAccessibleName("")
        self.lineEdit_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_2.setReadOnly(False)
        self.lineEdit_2.setPlaceholderText("")
        self.lineEdit_2.setClearButtonEnabled(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_4 = QtWidgets.QLineEdit(tijiliuliang)
        self.lineEdit_4.setGeometry(QtCore.QRect(310, 280, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_4.setAccessibleName("")
        self.lineEdit_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_4.setText("")
        self.lineEdit_4.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_4.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_4.setReadOnly(False)
        self.lineEdit_4.setPlaceholderText("")
        self.lineEdit_4.setClearButtonEnabled(True)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit = QtWidgets.QLineEdit(tijiliuliang)
        self.lineEdit.setGeometry(QtCore.QRect(310, 130, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit.setFont(font)
        self.lineEdit.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit.setAccessibleName("")
        self.lineEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit.setStyleSheet("background-color: rgb(25、5, 255, 255);")
        self.lineEdit.setText("")
        self.lineEdit.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit.setReadOnly(False)
        self.lineEdit.setPlaceholderText("")
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_3 = QtWidgets.QLineEdit(tijiliuliang)
        self.lineEdit_3.setGeometry(QtCore.QRect(310, 230, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_3.setAccessibleName("")
        self.lineEdit_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_3.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_3.setText("")
        self.lineEdit_3.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_3.setReadOnly(False)
        self.lineEdit_3.setPlaceholderText("")
        self.lineEdit_3.setClearButtonEnabled(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_4 = QtWidgets.QLabel(tijiliuliang)
        self.label_4.setGeometry(QtCore.QRect(60, 175, 240, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(tijiliuliang)
        self.label_5.setGeometry(QtCore.QRect(40, 230, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(tijiliuliang)
        self.label_6.setGeometry(QtCore.QRect(40, 280, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.label_3 = QtWidgets.QLabel(tijiliuliang)
        self.label_3.setGeometry(QtCore.QRect(60, 130, 240, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.label_10 = QtWidgets.QLabel(tijiliuliang)
        self.label_10.setGeometry(QtCore.QRect(30, 430, 360, 90))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("background-color: rgb(85, 170, 0);")
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.lineEdit_5 = QtWidgets.QLineEdit(tijiliuliang)
        self.lineEdit_5.setGeometry(QtCore.QRect(310, 330, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_5.setAccessibleName("")
        self.lineEdit_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_5.setText("")
        self.lineEdit_5.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_5.setReadOnly(False)
        self.lineEdit_5.setPlaceholderText("")
        self.lineEdit_5.setClearButtonEnabled(True)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_7 = QtWidgets.QLabel(tijiliuliang)
        self.label_7.setGeometry(QtCore.QRect(60, 330, 240, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_7.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.lineEdit_6 = QtWidgets.QLineEdit(tijiliuliang)
        self.lineEdit_6.setGeometry(QtCore.QRect(310, 380, 260, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.lineEdit_6.setAccessibleName("")
        self.lineEdit_6.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_6.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.lineEdit_6.setText("")
        self.lineEdit_6.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_6.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_6.setReadOnly(False)
        self.lineEdit_6.setPlaceholderText("")
        self.lineEdit_6.setClearButtonEnabled(True)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_8 = QtWidgets.QLabel(tijiliuliang)
        self.label_8.setGeometry(QtCore.QRect(60, 380, 240, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        font.setKerning(True)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_8.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(tijiliuliang)
        self.label_9.setGeometry(QtCore.QRect(30, 65, 140, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("background-color: rgb(160, 255, 17);")
        self.label_9.setTextFormat(QtCore.Qt.RichText)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.label_11 = QtWidgets.QLabel(tijiliuliang)
        self.label_11.setGeometry(QtCore.QRect(170, 65, 70, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        font.setKerning(True)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("background-color: rgb(255, 243, 75);")
        self.label_11.setText("")
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.radioButton = QtWidgets.QRadioButton(tijiliuliang)
        self.radioButton.setGeometry(QtCore.QRect(280, 60, 85, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        self.radioButton.setFont(font)
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(tijiliuliang)
        self.radioButton_2.setGeometry(QtCore.QRect(430, 60, 85, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(tijiliuliang)
        self.radioButton_3.setGeometry(QtCore.QRect(280, 90, 130, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(tijiliuliang)
        self.radioButton_4.setGeometry(QtCore.QRect(430, 90, 130, 30))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(16)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setObjectName("radioButton_4")
        self.checkBox = QtWidgets.QCheckBox(tijiliuliang)
        self.checkBox.setGeometry(QtCore.QRect(170, 65, 70, 40))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        self.checkBox.setFont(font)
        self.checkBox.setObjectName("checkBox")
        self.checkBox.setChecked(True)


        self.retranslateUi(tijiliuliang)
        QtCore.QMetaObject.connectSlotsByName(tijiliuliang)

        # 只允许输入数字
        self.lineEdit.setValidator(QDoubleValidator())
        self.lineEdit_2.setValidator(QDoubleValidator())
        self.lineEdit_3.setValidator(QDoubleValidator())
        self.lineEdit_4.setValidator(QDoubleValidator())
        self.lineEdit_5.setValidator(QDoubleValidator())
        self.lineEdit_6.setValidator(QDoubleValidator())

        self.lineEdit_4.setText("0")

        #设置信号
        self.pushButton.clicked.connect(self.jisuan)
        self.radioButton.toggled.connect(self.cleck)
        self.radioButton_2.toggled.connect(self.cleck)
        self.radioButton_3.toggled.connect(self.cleck)
        self.radioButton_4.toggled.connect(self.cleck)
        self.checkBox.clicked.connect(self.xuanze)

    def xuanze(self):
        if self.checkBox.isChecked()==True:
            self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
            if self.radioButton_4.isChecked() == True:
                self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        else:
            self.lineEdit_4.setStyleSheet("background-color: rgb(85, 255, 255);")

    def cleck(self):
        if self.radioButton.isChecked():
            self.checkBox.setChecked(True)
            self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_3.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(55, 255, 255);")
        if self.radioButton_2.isChecked():
            self.checkBox.setChecked(True)
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_3.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(255, 255, 255);")
        if self.radioButton_3.isChecked():
            self.checkBox.setChecked(True)
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(85, 255, 255);")
        if self.radioButton_4.isChecked():
            self.checkBox.setChecked(False)
            self.lineEdit.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_2.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_3.setStyleSheet("background-color: rgb(85, 255, 255);")
            self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
            self.lineEdit_6.setStyleSheet("background-color: rgb(85, 255, 255);")

    def canshu(self):
        global S, D, P1, P2, T, Qv,T0
        Qv = self.lineEdit.text()
        T = self.lineEdit_2.text()
        P1 = self.lineEdit_3.text()
        P2 = self.lineEdit_4.text()
        S = self.lineEdit_5.text()
        D = self.lineEdit_6.text()
        T0=273.15

    def jisuan(self):
        self.canshu()
        global S, D, P1, P2, T, Qv, T0
        if self.radioButton.isChecked():
            if self.checkBox.isChecked():
                if D == None or P1 == None  or T == None or \
                        D == "" or P1 == ""  or T == "" or \
                        float(D) < 0 or float(P1) < 0 :
                    QMessageBox.information(None, "提示说明", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
                else:
                    T1 = float(T) + T0
                    S = round(np.pi * np.square(float(D) / 2), 5)
                    self.lineEdit_5.setText(str(S))
                    Qv = round(113 * S * float(P1) * np.sqrt(273 / T1), 5)
                    self.lineEdit.setText(str(Qv))
                    self.shuju()
            else:
                if D == None or P1 == None or P2 == None or T == None or \
                        D == "" or P1 == "" or P2 == "" or T == "" or \
                        float(D) < 0 or float(P1) < 0 or float(P2) < 0:
                    QMessageBox.information(None, "提示说明", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
                else:
                    T1 = float(T) + T0
                    S = round(np.pi * np.square(float(D) / 2), 5)
                    self.lineEdit_5.setText(str(S))
                    Qv =round( 227 * S * np.sqrt(273*float(P2) *(float(P1) -float(P2) )  / T1),5)
                    self.lineEdit.setText(str(Qv))
                    self.shuju()
        if self.radioButton_2.isChecked():
            if self.checkBox.isChecked():
                if P1 == None  or T == None or Qv == None or \
                        P1 == ""  or T == "" or Qv == "" or \
                        float(P1) < 0  or float(Qv) < 0:
                    QMessageBox.information(None, "提示说明", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
                else:
                    T1 = float(T) + T0
                    S = round(float(Qv) / (113 * float(P1) * np.sqrt(273 / T1)), 5)
                    D = round(2 * np.sqrt(float(S) / np.pi), 5)
                    self.lineEdit_5.setText(str(S))
                    self.lineEdit_6.setText(str(D))
                    self.shuju()
            else:
                if P1 == None or P2 == None or T == None or Qv == None or \
                        P1 == "" or P2 == "" or T == "" or Qv == "" or \
                        float(P1) < 0 or float(P2) < 0 or float(Qv) < 0:
                    QMessageBox.information(None, "提示说明", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
                else:
                    T1 = float(T) + T0
                    S = round(float(Qv) / (227 * np.sqrt(273 * float(P2) * (float(P1) - float(P2)) / T1)), 5)
                    D = round(2 * np.sqrt(float(S) / np.pi), 5)
                    self.lineEdit_5.setText(str(S))
                    self.lineEdit_6.setText(str(D))
                    self.shuju()
        if self.radioButton_3.isChecked():
            if self.checkBox.isChecked():
                if D == None or T == None or Qv == None or \
                        D == "" or T == "" or Qv == "" or \
                        float(D) < 0 or float(Qv) < 0:
                    QMessageBox.information(None, "提示说明", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
                else:
                    T1 = float(T) + T0
                    S = round(np.pi * np.square(float(D) / 2), 5)
                    self.lineEdit_5.setText(str(S))
                    P1 = Symbol('P1')
                    P1 = round(float(Qv) / (113 * S * np.sqrt(273 / T1)), 5)
                    self.lineEdit_3.setText(str(P1))
                    self.shuju()
            else:
                if D == None or T == None or Qv == None or P2 == None or \
                        D == "" or T == "" or Qv == "" or P2 == "" or\
                        float(D) < 0 or float(Qv) < 0 or float(P2) < 0:
                    QMessageBox.information(None, "提示说明", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
                else:
                    T1 = float(T) + T0
                    S = round(np.pi * np.square(float(D) / 2), 5)
                    self.lineEdit_5.setText(str(S))
                    P1 = Symbol('P1')
                    P1 = solve([227 * S * np.power(273 * float(P2) * (P1 - float(P2)) / T1, 0.5) - float(Qv)], [P1])
                    print(P1)
                    P1 = ','.join(str(i) for i in P1[0])
                    self.lineEdit_3.setText(str(P1))
                    self.shuju()
        if self.radioButton_4.isChecked():
            if D == None or P1 == None or T == None or Qv == None or \
                   D == "" or  P1 == "" or T == "" or Qv == "" or \
                   float(D) < 0 or float(P1) < 0 or float(Qv) < 0:
               QMessageBox.information(None, "提示说明", "输入不完整或错误，请检查后重新输入！", QMessageBox.Ok)
            else:
                T1 = float(T) + T0
                S = round(np.pi * np.square(float(D) / 2), 5)
                self.lineEdit_5.setText(str(S))
                P2 = Symbol('P2')
                P2 = solve([227 * S * np.power(273 * P2 * (float(P1) - P2) / T1, 0.5) - float(Qv)], [P2])
                print(P2)
                P2 = ','.join(str(i) for i in P2[1])  # 取结果的数值 不是复数 且去除括号
                self.lineEdit_4.setText(str(P2))
                self.shuju()

    def datetime(self):
        global now_time
        now_time= datetime.datetime.now().strftime("%Y.%m.%d %H:%M:%S")

    def shuju(self):
        self.datetime()
        def sql_insert(con, data):
                cursor = con.cursor()
                cursor.execute("insert into 体积流量 (日期,温度T,节流孔前压力P1,节流孔后压力P2,节流孔直径D,节流面积S,体积流量Qv) values(?,?,?,?,?,?,?)", data)
                con.commit()
        data = (now_time,T,P1,P2,D,S,Qv)
        sql_insert(con, data)

    def retranslateUi(self, tijiliuliang):
        _translate = QtCore.QCoreApplication.translate
        tijiliuliang.setWindowTitle(_translate("tijiliuliang", "体积流量计算V1.1 By ChengLiang"))
        self.label.setText(_translate("tijiliuliang", "体积流量计算"))
        self.pushButton.setText(_translate("tijiliuliang", "计算"))
        self.label_4.setText(_translate("tijiliuliang", "温度T（℃）"))
        self.label_5.setText(_translate("tijiliuliang", "节流孔前压力P1（MPa）"))
        self.label_6.setText(_translate("tijiliuliang", "节流孔后压力P2（MPa）"))
        self.label_3.setText(_translate("tijiliuliang", "体积流量Qv（L/min）"))
        self.label_10.setText(_translate("tijiliuliang", "<html><head/><body><p align=\"center\">亚声速Q<span style=\" vertical-align:sub;\">v</span>=227S(273P<span style=\" vertical-align:sub;\">2</span>(P<span style=\" vertical-align:sub;\">1</span>-P<span style=\" vertical-align:sub;\">2</span>)/T)<span style=\" vertical-align:super;\">0.5</span></p><p align=\"center\">声速Q<span style=\" vertical-align:sub;\">v</span>=113SP<span style=\" vertical-align:sub;\">1</span>(273/T)<span style=\" vertical-align:super;\">0.5</span></p></body></html>"))
        self.label_7.setText(_translate("tijiliuliang", "节流面积S（mm2）"))
        self.label_8.setText(_translate("tijiliuliang", "节流孔直径D（mm）"))
        self.label_9.setText(_translate("tijiliuliang", "气体流动类型"))
        self.radioButton.setText(_translate("tijiliuliang", "求流量"))
        self.radioButton_2.setText(_translate("tijiliuliang", "求面积"))
        self.radioButton_3.setText(_translate("tijiliuliang", "求孔前压力"))
        self.radioButton_4.setText(_translate("tijiliuliang", "求孔后压力"))
        self.checkBox.setText(_translate("tijiliuliang", "声速"))

import img_rc
import sys
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    Mainwidow = QtWidgets.QMainWindow()  # 创建窗体对象
    ui = Ui_tijiliuliang()  # 创建QT设计的窗体
    ui.setupUi(Mainwidow)  # 初始化设置
    Mainwidow.show()  # 显示窗体
    QMessageBox.information(None, "提示说明", "计算前请确认气体流动类型是否准确，声速或亚声速！", QMessageBox.Ok)
    sys.exit(app.exec_())  # 程序关闭时退出进程